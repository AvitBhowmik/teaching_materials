##############################################################
##                                                  R Script for                                                ##
##            Introduction to open source Spatial Analysis Tools and R              ##
##                                         by Avit Kumar Bhowmik                                     ##
##############################################################
## After completion of the brain warming
## Let's do some primary school math
1+1
## Create two vectors of one element and do the same as above
a = 1
b = 2
a+b
## With longer numeric vectors
C <- c(1, 2, 3, 4, 5)
D <- 6:10
C+D
E <- D+1
## Look inside a vector
E
## Extract an element from a vector
E[3]
## Positional query in a vector
which(E==9)
## Character vectors
F <- c("a", "b", "c", "d", "e")
G <- letters[6:10]
## Create a matrix
?cbind
Matrix <- cbind(C, D, E, F, G)
class(Matrix[,1])
class(C)
class(F)
## This did not work because of different vector types
## Therefore, create matrices with the same vector types
Matrix_int <- cbind(C, D, E)
Matrix_char <- cbind(F, G)
## However, we can combine them in a data frame
Data_Frame <- data.frame(C, D, E, F, G)
class(Data_Frame$C)
class(Data_Frame[,5])
?data.frame
Data_Frame <- data.frame(C, D, E, F, G, stringsAsFactors=F)
class(Data_Frame$C)
class(Data_Frame[,5])
default.stringsAsFactors()
?default.stringsAsFactors
Data_Frame <- data.frame(C, D, E, F, G, stringsAsFactors=options(stringsAsFactors = FALSE))
class(Data_Frame$C)
class(Data_Frame[,5])
Data_Frame <- data.frame(C, D, E, F, G, options(stringsAsFactors = F))
class(Data_Frame$C)
class(Data_Frame[,5])
getOption("stringsAsFactors")
Data_Frame <- data.frame(C, D, E, F, G, options(stringsAsFactors = F))
Data_Frame <- data.frame(C, D, E, F, G, options("stringsAsFactors" = F))
Data_Frame <- data.frame(C, D, E, F, G, options(stringsAsFactors = FALSE))
class(Data_Frame$C)
class(Data_Frame[,5])
## Differences between matrix and data frame
class(Matrix_int[1,])
class(Data_Frame[1,])
class(Data_Frame$D)
## Coercion vector types
Data_Frame$D <- as.numeric(Data_Frame$D)
## Create and enter a list
List <- list(Matrix_int, Matrix_char, Data_Frame)
List[[2]]
## Task 1: In the list object, add one to each of the element of the numeric matrix
## and replace the existing numeric matrix with the new numeric matrix.
## If
if(class(Data_Frame$G)=="numeric"){Data_Frame$G+1}else{Data_Frame$G}
if(class(Data_Frame$C)=="numeric"){Data_Frame$C+1}else{Data_Frame$C}
?Control
for(i in 1:(ncol(Data_Frame)-1)){
if(class(Data_Frame[,i])=="numeric" & class(Data_Frame[,i+1])=="numeric")
{Data_Frame[,i] <- Data_Frame[,i]+Data_Frame[,i+1]}else{Data_Frame[,i] <- Data_Frame[,i]}
}
install.packages("sp")
library(sp)
# 47 55, 5 16
coords <- cbind(x = sample(47:55, size = 8), y = sample(5:16, size = 8))
data <- data.frame(a=1:8, b=9:16, c=17:24)
SPD <- SpatialPointsDataFrame(coords=coords, data=data)
class(SPD)
plot(SPD)
spplot(SPD, colorkey=T, scales=list(draw=T))
library(maptools)
setwd("/Users/avit/PhD/Teaching/Summer_Academy/2015/summer_academy_15/Introduction_open_source_R/data")
writePointsShape(SPD, "SPD")
SPD_sp <- readShapePoints("SPD")
class(SPD_sp)
List[[2]]
List[[1]]
List[[1]]+1
List[[1]] <- List[[1]]+1
List[[1]]
for(i in 2:ncol(Data_Frame)){
if(class(Data_Frame[,i])=="numeric" & class(Data_Frame[,i-1])=="numeric")
{Data_Frame[,i] <- Data_Frame[,i]-Data_Frame[,i-1]}else{Data_Frame[,i] <- Data_Frame[,i]}
}
Data_Frame
?ddply
??ddply
?apply
Data_Frame
apply(Data_Frame, 2,
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]})
apply(Data_Frame, 2,
function(x) if(class(x)=="numeric" & class(Data_Frame[,which(colnames(Data_Frame)==x)])=="numeric")
{x <- x+Data_Frame[,which(colnames(Data_Frame)==x)]}else{x <- x})
Data_Frame
sapply(1:(ncol(Data_Frame)-1),
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]})
Data_Frame
?sapply
NDT <- sapply(1:(ncol(Data_Frame)-1),
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]})
NDT
class(NDT )
NDT <- sapply(1:(ncol(Data_Frame)-1),
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]},
simplify=F)
NDT
Data_Frame
as.data.frame(sapply(1:(ncol(Data_Frame)-1),
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]}))
NDT <- as.data.frame(sapply(1:(ncol(Data_Frame)-1),
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]}))
NDT
class(NDT$V4)
class(NDT$V1)
sapply(1:(ncol(Data_Frame)-1),
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]})
?apply
NDT
NDT <- sapply(1:(ncol(Data_Frame)-1),
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]})
NDT
NDT <- as.data.frame(sapply(1:(ncol(Data_Frame)-1),
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]}))
NDT
??ddply
NDT <- as.data.frame(sapply(1:(ncol(Data_Frame)-1),
function(x) if(class(Data_Frame[,x])=="numeric" & class(Data_Frame[,x+1])=="numeric")
{Data_Frame[,x] <- Data_Frame[,x]+Data_Frame[,x+1]}else{Data_Frame[,x] <- Data_Frame[,x]}))
NDT[,1:3] <- as.numeric(NDT[,1:3])
NDT[,1:3]
class(NDT[,1:3])
D^2
apply(Data_Frame, 2, function(x) if(class(x)=="numeric"){x <- x^2+x^3}else{x <- x})
